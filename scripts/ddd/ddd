#!/bin/bash

# Must use bash 4.0+

# ddd - The Dynamic Disk Destroyer


# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'



TMP_ROOT="/tmp/"
DDD_SUBDIR="ddd_data"

TMP_DIR=${TMP_ROOT}/${DDD_SUBDIR}
DDD_MAP="${TMP_DIR}/mappings"

DD="dd"

ACTION='invalid'

# Map to hold usb -> pid mappings
declare -A USB_MAP
# Squelch not defined errors by adding a map.
USB_MAP[nil]="nil"

usage() {
	cat <<EOF
ddd - The Dynamic Disk Destroyer

Usage:
ddd start [inFile] [outFile]
ddd status [outFile]

inFile and outFile are only needed if you specify start
EOF
}

parse_args() {
	if [ "$#" -lt 1 ]; then
		usage
		exit 1
	fi

	case $1 in
		start)
			if [ "$#" -lt 3 ]; then
				usage
				exit 1
			fi
			INFILE="$2"
			OUTFILE="$3"
			ACTION='start'
			;;
		status)
			if [ "$#" -lt 2 ]; then
				usage
				exit 1
			fi
			OUTFILE="$2"
			ACTION='status'
			;;
		*)
			usage
			exit 1
			;;
	esac
}

restore_mapping() {
	# Create our tmp dir if we haven't already
	mkdir -p ${TMP_DIR}

	# If we have stored USB_MAP, reload it
	if [ -f ${DDD_MAP} ]; then
		source ${DDD_MAP}
	fi
}

save_mapping() {
	# Create our tmp dir if we haven't already
	mkdir -p ${TMP_DIR}

	# Write USB_MAP to tmp file
	declare -p USB_MAP > ${DDD_MAP}
}

check_bash_version() {
	# Check to see if we have a suitable version of bash (for maps)
	if [ "$(echo "$BASH_VERSION" | awk -F. '{ print $1 }')" -lt 4 ]; then
		echo "ddd requires bash > 4.0. Exiting." >&2
		exit 1
	fi
}

status() {
}

start() {
}

main() {
	check_bash_version

	restore_mapping

	parse_args "$@"

	save_mapping
}

main "$@"
